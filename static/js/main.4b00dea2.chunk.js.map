{"version":3,"sources":["components/search-field/search-field.component.jsx","components/data-preview/data-preview.component.jsx","components/additional-data/additional-data.component.jsx","components/header/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchField","handleChange","className","type","placeholder","element","onChange","DataPreview","persons","handleClick","map","person","id","onClick","firstName","lastName","email","phone","AdditionalData","clickedItem","description","address","streetAddress","city","state","zip","Header","sortElements","sortToogle","boolean","currentItem","App","data","copedData","previousItem","fetch","then","response","json","setState","this","e","preventDefault","target","getAttribute","sort","a","b","console","log","filter","toString","toLowerCase","includes","value","key","foundItem","find","item","parentNode","setAttribute","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b00dea2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./search-field.style.scss\";\r\n\r\nconst SearchField = ({handleChange}) => (\r\n    <div className=\"search-field\">\r\n        <input type=\"search\" placeholder=\"search\" element=\"id\" onChange={handleChange} />\r\n        <input type=\"search\" placeholder=\"search\" element=\"firstName\" onChange={handleChange} />\r\n        <input type=\"search\" placeholder=\"search\" element=\"lastName\" onChange={handleChange} />\r\n        <input type=\"search\" placeholder=\"search\" element=\"email\" onChange={handleChange} />\r\n        <input type=\"search\" placeholder=\"search\" element=\"phone\" onChange={handleChange} />\r\n    </div>\r\n)\r\n\r\nexport default SearchField;","import React from \"react\";\r\n\r\nimport \"./data-preview.styles.scss\";\r\n\r\n\r\n\r\nconst DataPreview  = ({persons,handleClick}) => (\r\n    <div className=\"data-preview\">\r\n        {\r\n            persons.map(person => (\r\n                <div id={person.id} className=\"data-line\" onClick={handleClick}>\r\n                    <div className=\"item\" >{person.id}</div>\r\n                    <div className=\"item\" >{person.firstName}</div>\r\n                    <div className=\"item\" >{person.lastName}</div>\r\n                    <div className=\"item\" >{person.email}</div>\r\n                    <div className=\"item\" >{person.phone}</div>\r\n                </div>\r\n            ))\r\n        }\r\n    </div>\r\n) \r\n\r\n    \r\n\r\n    \r\n\r\n\r\nexport default DataPreview;","import React from \"react\";\r\n\r\nimport './additional-data.styles.scss';\r\n\r\nconst AdditionalData = ({clickedItem}) => (\r\n    <div className=\"additional-data\">\r\n        <div className=\"additional-data__item\">{clickedItem.description}</div>\r\n        <div className=\"additional-data__item\">{clickedItem.address.streetAddress}</div>\r\n        <div className=\"additional-data__item\">{clickedItem.address.city}</div>\r\n        <div className=\"additional-data__item\">{clickedItem.address.state}</div>\r\n        <div className=\"additional-data__item\">{clickedItem.address.zip}</div>   \r\n    </div>\r\n)\r\n\r\nexport default AdditionalData;","import React from \"react\";\r\n\r\nimport \"./header.styles.scss\";\r\n\r\n\r\nconst Header = ({sortElements, sortToogle}) => (\r\n        <div className=\"header\">\r\n            <div>id <button element=\"id\" onClick={sortElements}>{sortToogle.boolean && sortToogle.currentItem===\"id\" ? \"⇓\" : \"⇑\"}</button></div>\r\n            <div>firstName <button element=\"firstName\" onClick={sortElements}>{sortToogle.boolean && sortToogle.currentItem===\"firstName\" ? \"⇓\" : \"⇑\"}</button></div>\r\n            <div>lastName <button element=\"lastName\" onClick={sortElements}>{sortToogle.boolean && sortToogle.currentItem===\"lastName\" ? \"⇓\" : \"⇑\"}</button></div>\r\n            <div>email <button element=\"email\" onClick={sortElements}>{sortToogle.boolean && sortToogle.currentItem===\"email\" ? \"⇓\" : \"⇑\"}</button></div>\r\n            <div>phone <button element=\"phone\" onClick={sortElements}>{sortToogle.boolean && sortToogle.currentItem===\"phone\" ? \"⇓\" : \"⇑\"}</button></div>\r\n        </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\n\nimport './App.scss';\n\n\nimport SearchField from \"./components/search-field/search-field.component\";\n\nimport DataPreview from \"./components/data-preview/data-preview.component\";\n\nimport AdditionalData from \"./components/additional-data/additional-data.component\";\n\n\nimport Header from \"./components/header/header.component\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state ={\n        data: [],\n        copedData: [],\n        sortToogle: {boolean: true, currentItem: \"\"},\n        clickedItem: {address: \"\"},\n        previousItem: \"\"\n    };\n  }\n\n  componentDidMount(){\n    fetch(\"http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\")\n    .then(response => response.json()).then(data => this.setState({data: data,copedData: data}));\n  }\n\n\n\n  \n  render(){\n        \n\n        \n        \n        return(\n            <div className=\"data\">\n                \n\n\n              <Header sortToogle={this.state.sortToogle} sortElements={e =>{\n                e.preventDefault();\n               \n                \n                const element = e.target.getAttribute(\"element\");\n                \n            \n                this.setState({data: this.state.data.sort((a,b)=> {\n                    \n                    if(this.state.sortToogle.boolean){\n                        if (a[element] > b[element]){\n                            return 1;\n                        }\n                        if (a[element] < b[element]){\n                            return -1;\n                        }\n                        return 0;\n                    }\n                    else{\n                        if (a[element] < b[element]){\n                            return 1;\n                        }\n                        if (a[element] > b[element]){\n                            return -1;\n                        }\n                        return 0;\n                    }\n                    \n                })});\n                \n                \n                this.setState({sortToogle: {boolean: !this.state.sortToogle.boolean,currentItem:e.target.getAttribute(\"element\")}});\n              \n              \n              }} />\n                \n                \n                <SearchField handleChange={e => {\n                  console.log();\n                  console.log();\n                  this.setState({data:this.state.copedData.filter(person => person[e.target.getAttribute(\"element\")].toString().toLowerCase().includes(e.target.value.toLowerCase()))})\n                  console.log();\n                 \n\n                }} />\n                \n                  <DataPreview key={this.state.data.id} persons={this.state.data}  handleClick = {e => {\n                  \n                    e.preventDefault();\n\n                  \n                    const foundItem = this.state.data.find(item => item.id==e.target.parentNode.getAttribute(\"id\"));\n                    \n                    e.target.parentNode.setAttribute(\"style\",\"background-color:#10e0e0\")\n                    \n                   \n\n                    if(e.target.parentNode!==this.state.previousItem){\n                      this.setState({clickedItem: foundItem})\n                      this.setState({previousItem: e.target.parentNode});\n                    }else{\n                       this.setState({previousItem: \"\"});\n                       this.setState({clickedItem: {address: \"\"}});\n\n                    }\n                    \n                    if(this.state.previousItem){this.state.previousItem.setAttribute(\"style\",\"background-color:none\")}\n                    \n                    \n                   \n                 \n                }} />\n\n\n\n               <AdditionalData clickedItem={this.state.clickedItem} />\n                \n               \n            \n            </div>\n        )\n        \n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}